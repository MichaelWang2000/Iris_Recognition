# Form implementation generated from reading ui file 'administer_checkmember.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDateTime
from PyQt6.QtGui import QBrush, QColor
from PyQt6.QtWidgets import QTableWidgetItem, QMainWindow, QItemDelegate
from matplotlib.backends.backend_qt import MainWindow
from datetime import datetime

from Database.testconnection import getDatabase
from user_checkInOutInformation import Ui_Dialog


class EmptyDelegate(QItemDelegate):
    def __init__(self,parent):
        super(EmptyDelegate, self).__init__(parent)
    def createEditor(self, QWidget, QStyleOptionViewItem, QModelIndex):
        return None

class checkInOut(Ui_Dialog, QMainWindow):
    def __init__(self, row):
        super(Ui_Dialog, self).__init__()
        self.getStudentID(row)
        self.setupUi(self)


class Ui_adCheckMember1(MainWindow):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(320, 500, 171, 51))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(290, -20, 211, 91))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 50, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")


        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(60, 100, 681, 381))
        self.tableWidget.setObjectName("tableWidget")


        self.getTable()

        # self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)   # 全表格不可编辑
        # self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)   # 全表格不可选中

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 37))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.tableWidget.setColumnWidth(6, 230)
        self.tableWidget.setColumnWidth(7, 200)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "当前成员信息"))
        self.label_2.setText(_translate("MainWindow", "具体出入情况可点击当前姓名查看"))
        self.pushButton.setText(_translate("MainWindow", "返回"))

    # 生成表格
    def getTable(self):
        self.tableRow = self.getDataNumber()
        self.DatabaseResult = self.getDataResult()
        # 五行三列
        self.tableWidget.setRowCount(self.tableRow)
        self.tableWidget.setColumnCount(8)
        # 设置表格字段
        self.tableWidget.setHorizontalHeaderLabels(
            ['姓名', '性别', '学院', '学号', '手机号', '状态', '最后登入/登出时间', '操作'])
        # 循环添加数据
        for Item in range(0, self.tableRow):
            newItem = QTableWidgetItem(self.DatabaseResult[Item][0])
            self.tableWidget.setItem(Item, 0, newItem)
            newItem = QTableWidgetItem(self.DatabaseResult[Item][1])
            self.tableWidget.setItem(Item, 1, newItem)
            newItem = QTableWidgetItem(self.DatabaseResult[Item][2])
            self.tableWidget.setItem(Item, 2, newItem)
            newItem = QTableWidgetItem(self.DatabaseResult[Item][3])
            self.tableWidget.setItem(Item, 3, newItem)
            newItem = QTableWidgetItem((self.DatabaseResult[Item][4]))
            self.tableWidget.setItem(Item, 4, newItem)


            if self.DatabaseResult[Item][8] == '1':
                newItem = QTableWidgetItem('登入中')
            else:
                newItem = QTableWidgetItem('未登入')
            self.tableWidget.setItem(Item, 5, newItem)



            if self.DatabaseResult[Item][9] != None:
                test = time.strptime(self.DatabaseResult[Item][9], '%Y-%m-%d %H:%M:%S')
                if test.tm_hour <= 8 or test.tm_hour >= 21:
                    newItem = QTableWidgetItem(self.DatabaseResult[Item][9])
                    self.tableWidget.setItem(Item, 6, newItem)
                    self.tableWidget.item(Item, 0).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 1).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 2).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 3).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 4).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 5).setForeground(QBrush(QColor(255, 0, 0)))
                    self.tableWidget.item(Item, 6).setForeground(QBrush(QColor(255, 0, 0)))
                else:
                    newItem = QTableWidgetItem(self.DatabaseResult[Item][9])
                    self.tableWidget.setItem(Item, 6, newItem)
                if Item == 6:
                    print(self.DatabaseResult[Item][9])



            self.tableWidget.setCellWidget(Item, 7, self.buttonForRow())  # 在最后一个单元格中加入修改、删除按钮

        self.tableWidget.setItemDelegateForColumn(3, EmptyDelegate(self))  # 设置第四列不可编辑

    # 获取有多少行数据
    def getDataNumber(self):
        db = getDatabase()
        cursor = db.cursor()  # 使用cursor()方法获取数据库操作游标
        cursor.execute("select * from user")  # 执行SQL语句
        row = cursor.rowcount  # 获取记录个数，用于设置表格的行数
        return row

    # 获取数据
    def getDataResult(self):
        db = getDatabase()
        cursor = db.cursor()  # 使用cursor()方法获取数据库操作游标
        cursor.execute("select * from user")  # 执行SQL语句
        result = cursor.fetchall()  # 获取所有记录
        return result

    # 设置按钮
    def buttonForRow(self):
        widget = QtWidgets.QWidget()
        # 修改
        self.updateBtn = QtWidgets.QPushButton('修改')
        self.updateBtn.setStyleSheet(''' text-align : center;
                                            background-color : NavajoWhite;
                                            height : 30px;
                                            border-style: outset;
                                            font : 13px  ''')

        # 删除
        self.deleteBtn = QtWidgets.QPushButton('删除')
        self.deleteBtn.setStyleSheet(''' text-align : center;
                                        background-color : LightCoral;
                                        height : 30px;
                                        border-style: outset;
                                        font : 13px; ''')
        # 查看
        self.checkteBtn = QtWidgets.QPushButton('查看')
        self.checkteBtn.setStyleSheet(''' text-align : center;
                                                background-color : Blue;
                                                height : 30px;
                                                border-style: outset;
                                                font : 13px; ''')

        self.updateBtn.clicked.connect(self.UpdateButton)
        self.deleteBtn.clicked.connect(self.DeleteButton)
        self.checkteBtn.clicked.connect(self.CheckButton)
        hLayout = QtWidgets.QHBoxLayout()
        hLayout.addWidget(self.updateBtn)
        hLayout.addWidget(self.deleteBtn)
        hLayout.addWidget(self.checkteBtn)
        hLayout.setContentsMargins(5, 2, 5, 2)
        widget.setLayout(hLayout)
        return widget

    # 每行的修改按钮
    def UpdateButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            db = getDatabase()
            cursor = db.cursor()
            # 缺手机号和性别校验
            sql = "UPDATE user SET Name = '"+self.tableWidget.item(row,0).text()+"', Gender ='"+self.tableWidget.item(row,1).text()+"', College ='"+self.tableWidget.item(row,2).text()+"', PhoneNumber ="+self.tableWidget.item(row,4).text()+"  where StudentID = " + self.tableWidget.item(row,3).text() + ""
            # print(sql)
            cursor.execute(sql)
            sql2 = "insert into ad_Time(ID, time, type, studentID, Information) values(" + repr(self.ad_account) + "," + repr(
                QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")) + ", 3,"+ self.tableWidget.item(row,3).text() +","+repr(sql)+")"
            cursor.execute(sql2)
            # 修改
            db.commit()
            # 关闭游标
            cursor.close()
            self.getTable()

    #  每行的删除按钮
    def DeleteButton(self):
        button = self.sender()
        if button:
                # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            # self.tableWidget.removeRow(row)
            db = getDatabase()
            cursor = db.cursor()
            sql = "DELETE FROM user where StudentID ="  + self.tableWidget.item(row,3).text() + ""
            # print(sql)
            cursor.execute(sql)
            sql2 = "insert into ad_Time(ID, time, type, studentID, Information) values(" + repr(self.ad_account) + "," + repr(
                QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")) + ", 4,"+ self.tableWidget.item(row,3).text() +","+repr(sql)+")"
            cursor.execute(sql2)
            # 修改
            db.commit()
            # 关闭游标
            cursor.close()
            self.getTable()



    # 每行的查看按钮
    def CheckButton(self):
        button = self.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.tableWidget.indexAt(button.parent().pos()).row()
            # self.tableWidget.removeRow(row)
            # print(self.tableWidget.item(row, 0).text())

            studentID = self.tableWidget.item(row, 3).text()

            db = getDatabase()
            cursor = db.cursor()
            sql2 = "insert into ad_Time(ID, time, type, studentID) values(" + repr(self.ad_account) + "," + repr(
                QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")) + ", 5,"+ self.tableWidget.item(row,3).text() +")"
            cursor.execute(sql2)

            db.commit()
            # 关闭游标
            cursor.close()

            self.one = checkInOut(studentID)
            self.one.show()

    # 获取管理员账号
    def getad_account(self, ad_account):
        self.ad_account = ad_account

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_adCheckMember1()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
