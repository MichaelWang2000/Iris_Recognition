# Form implementation generated from reading ui file 'user_register1.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import pymysql
from PyQt6.QtCore import QDateTime

from Database.testconnection import getDatabase
from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_UserRegister1(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setPointSize(17)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 40, 58, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 80, 58, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(80, 130, 58, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(80, 180, 58, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(70, 230, 58, 31))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(50, 280, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(150, 40, 113, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(150, 130, 113, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(150, 180, 241, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(150, 230, 241, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(150, 80, 103, 32))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.lineEdit_5 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(150, 280, 401, 31))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(140, 410, 161, 81))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(460, 410, 161, 81))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 37))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "姓名"))
        self.label_2.setText(_translate("MainWindow", "性别"))
        self.label_3.setText(_translate("MainWindow", "学院"))
        self.label_4.setText(_translate("MainWindow", "学号"))
        self.label_5.setText(_translate("MainWindow", "手机号"))
        self.label_6.setText(_translate("MainWindow", "居住地址"))
        self.comboBox.setItemText(0, _translate("MainWindow", "男"))
        self.comboBox.setItemText(1, _translate("MainWindow", "女"))
        self.pushButton.setText(_translate("MainWindow", "返回"))
        self.pushButton_2.setText(_translate("MainWindow", "完成"))

    # 信息填写不完整时的弹窗提示
    def incompleteInformation(self):
        box = QtWidgets.QMessageBox()
        box.warning(self, "提示", "你的信息填写不完整，请填写完再进行下一步")

    # 手机号或者学号填写不为数字时
    def incorrectIDandPhone(self):
        box = QtWidgets.QMessageBox()
        box.warning(self, "提示", "你的学号和手机号格式不正确，请修改")

    # 手机号或者学号填写不为数字时
    def incorrectPhone(self):
        box = QtWidgets.QMessageBox()
        box.warning(self, "提示", "你的手机号格式不正确，请修改")

    # 已存在当前学号时
    def ExistID(self):
        box = QtWidgets.QMessageBox()
        box.warning(self, "提示", "你的学号已经被注册过")


    # 当信息完整时保存当前信息
    def saveInformation(self):
        db = getDatabase()
        cursor = db.cursor()
        a = self.lineEdit.text()
        sql = "insert into user(Name,Gender,College,StudentID,PhoneNumber,Address,Status, password) values("+repr(self.lineEdit.text())+","+ repr(self.comboBox.currentText()) +","+ repr(self.lineEdit_2.text())+","+repr(self.lineEdit_3.text())+","+repr(self.lineEdit_4.text())+","+repr(self.lineEdit_5.text())+", 0, 1234);"

        self.sql = sql
        sql2 = "insert into ad_Time(ID, time, type, studentID, Information) values(" + repr(self.ad_account) + "," + repr(
            QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")) + ", 2,"+repr(self.lineEdit_3.text())+", "+repr(sql)+")"
        print(sql2)
        cursor.execute(sql2)
        # print(sql)
        cursor.execute(sql)
        # 修改
        db.commit()
        # 关闭游标
        cursor.close()

    # 输入的电话号和学号是否为数字
    def IDandPhoneisNumber(self):
        if(self.lineEdit_3.text().isdigit() and self.lineEdit_4.text().isdigit()):
            return True
        else:
            self.incorrectIDandPhone()

    def PhoneNumberLenth(self):
        if len(self.lineEdit_4.text()) == 11:
            return True
        else:
            self.incorrectPhone()

    #  判断信息是否填写完整
    def informationisNone(self):
        if(self.lineEdit.text() == "" or self.lineEdit_2.text() == "" or self.lineEdit_3.text() == "" or
        self.lineEdit_4.text() == "" or self.lineEdit_5.text() == ""):
            self.incompleteInformation()
            return False
        else:
            return True

    # 判断是否存在当前学号
    def existID(self):
        db = getDatabase()
        cursor = db.cursor()
        sql = "select * from user where StudentID = "+repr(self.lineEdit_3.text())+""
        cursor.execute(sql)
        result = cursor.fetchall()
        # 修改
        db.commit()
        # 关闭游标
        cursor.close()
        if result != ():
            self.ExistID()
            return False
        else:
            return True

    # 给会员注册第二界面传递参数
    def transferParameter(self):
        return self.lineEdit_3.text()

    # 当页面二为返回的时候,给未完成注册的会员更新信息
    def updateInformation(self):
        db = getDatabase()
        cursor = db.cursor()
        sql = "insert into user(Name,Gender,College,StudentID,PhoneNumber,Address) values(" + repr(
            self.lineEdit.text()) + "," + repr(self.comboBox.currentText()) + "," + repr(
            self.lineEdit_2.text()) + "," + repr(self.lineEdit_3.text()) + "," + repr(
            self.lineEdit_4.text()) + "," + repr(self.lineEdit_5.text()) + ");"

        # print(sql)
        cursor.execute(sql)
        # 修改
        db.commit()
        # 关闭游标
        cursor.close()

    # 获取管理员姓名
    def getad_account(self, ad_account):
        self.ad_account = ad_account

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_UserRegister1()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
